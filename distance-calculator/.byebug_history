c
cost.valid?
c
cost.cost_and_path
cost.valid?
c
@path = distance_calc.shortest_path
@distance = distance_calc.cost.to_i
distance_calc = Dijkstra.new(@origin.name, @destiny.name, courses)
c
@path = distance_calc.shortest_path
@distance = distance_calc.cost.to_i
distance_calc = Dijkstra.new(@origin.id, @destiny.id, courses)
exit
EXIT
ob = Dijkstra.new(start_point, end_point, r)
end_point = 3 # arrival node
start_point = 1 # starting node
r = [[1, 2, 1],[1, 3, 9],[1, 5, 3],[2, 4, 3],[2, 3, 7],[4, 3, 2],[4, 1, 1],[5, 2, 4],[5, 4, 2]]
     [5, 4, 2]]
     [5, 2, 4],
     [4, 1, 1],
     [4, 3, 2],
     [2, 3, 7],
     [2, 4, 3],
     [1, 5, 3],
     [1, 3, 9],
r = [[1, 2, 1],
c
Dijkstra.new(2, 1, courses)
Dijkstra.new(@origin.id, @destiny.id, courses)
@destiny
@origin
courses
distance_calc = Dijkstra.new(@origin.id, @destiny.id, courses)
c
cost.cost_and_path
cost.valid?
c
cost.errors
cost.valid?
c
response.status
response
c
@origin.to_ic
Dijkstra.new(2, 1, courses)
c
courses
@destiny
c
x
@destination
@origin
c
course.errors
course.valid?
course.valid?]
exit
response
subject
exit
c
course.reload
course.destiny_location
course.save
course.valid?
course.destiny_location.valid?
course.destiny_location
course
course.valid?
c
Course.all
subject
c
Course.all
Course.find_by(origin_location_id: origin_location.id, destiny_location_id: destiny_location.id)
course_exists?
c
Course.all
destiny_location
origin_location
course_exists?
c
course_exists?
